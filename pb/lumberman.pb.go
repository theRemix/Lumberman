// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lumberman.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing prefix
type PrefixRequest struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrefixRequest) Reset()         { *m = PrefixRequest{} }
func (m *PrefixRequest) String() string { return proto.CompactTextString(m) }
func (*PrefixRequest) ProtoMessage()    {}
func (*PrefixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{0}
}

func (m *PrefixRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixRequest.Unmarshal(m, b)
}
func (m *PrefixRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixRequest.Marshal(b, m, deterministic)
}
func (m *PrefixRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixRequest.Merge(m, src)
}
func (m *PrefixRequest) XXX_Size() int {
	return xxx_messageInfo_PrefixRequest.Size(m)
}
func (m *PrefixRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixRequest proto.InternalMessageInfo

func (m *PrefixRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// The message containing key
type KeyMessage struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyMessage) Reset()         { *m = KeyMessage{} }
func (m *KeyMessage) String() string { return proto.CompactTextString(m) }
func (*KeyMessage) ProtoMessage()    {}
func (*KeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{1}
}

func (m *KeyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyMessage.Unmarshal(m, b)
}
func (m *KeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyMessage.Marshal(b, m, deterministic)
}
func (m *KeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyMessage.Merge(m, src)
}
func (m *KeyMessage) XXX_Size() int {
	return xxx_messageInfo_KeyMessage.Size(m)
}
func (m *KeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_KeyMessage proto.InternalMessageInfo

func (m *KeyMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// The request message containing the log data
type PutLogRequest struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutLogRequest) Reset()         { *m = PutLogRequest{} }
func (m *PutLogRequest) String() string { return proto.CompactTextString(m) }
func (*PutLogRequest) ProtoMessage()    {}
func (*PutLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{2}
}

func (m *PutLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutLogRequest.Unmarshal(m, b)
}
func (m *PutLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutLogRequest.Marshal(b, m, deterministic)
}
func (m *PutLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutLogRequest.Merge(m, src)
}
func (m *PutLogRequest) XXX_Size() int {
	return xxx_messageInfo_PutLogRequest.Size(m)
}
func (m *PutLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutLogRequest proto.InternalMessageInfo

func (m *PutLogRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *PutLogRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// The response message containing the log data and timestamp
type LogDetail struct {
	Key                  string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 string               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LogDetail) Reset()         { *m = LogDetail{} }
func (m *LogDetail) String() string { return proto.CompactTextString(m) }
func (*LogDetail) ProtoMessage()    {}
func (*LogDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{3}
}

func (m *LogDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogDetail.Unmarshal(m, b)
}
func (m *LogDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogDetail.Marshal(b, m, deterministic)
}
func (m *LogDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogDetail.Merge(m, src)
}
func (m *LogDetail) XXX_Size() int {
	return xxx_messageInfo_LogDetail.Size(m)
}
func (m *LogDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LogDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LogDetail proto.InternalMessageInfo

func (m *LogDetail) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogDetail) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogDetail) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// The response message containing the logs for prefix
type LogDetailList struct {
	Logs                 []*LogDetail `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LogDetailList) Reset()         { *m = LogDetailList{} }
func (m *LogDetailList) String() string { return proto.CompactTextString(m) }
func (*LogDetailList) ProtoMessage()    {}
func (*LogDetailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{4}
}

func (m *LogDetailList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogDetailList.Unmarshal(m, b)
}
func (m *LogDetailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogDetailList.Marshal(b, m, deterministic)
}
func (m *LogDetailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogDetailList.Merge(m, src)
}
func (m *LogDetailList) XXX_Size() int {
	return xxx_messageInfo_LogDetailList.Size(m)
}
func (m *LogDetailList) XXX_DiscardUnknown() {
	xxx_messageInfo_LogDetailList.DiscardUnknown(m)
}

var xxx_messageInfo_LogDetailList proto.InternalMessageInfo

func (m *LogDetailList) GetLogs() []*LogDetail {
	if m != nil {
		return m.Logs
	}
	return nil
}

// The response message containing all prefixes
type PrefixesList struct {
	Prefixes             []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrefixesList) Reset()         { *m = PrefixesList{} }
func (m *PrefixesList) String() string { return proto.CompactTextString(m) }
func (*PrefixesList) ProtoMessage()    {}
func (*PrefixesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{5}
}

func (m *PrefixesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixesList.Unmarshal(m, b)
}
func (m *PrefixesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixesList.Marshal(b, m, deterministic)
}
func (m *PrefixesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixesList.Merge(m, src)
}
func (m *PrefixesList) XXX_Size() int {
	return xxx_messageInfo_PrefixesList.Size(m)
}
func (m *PrefixesList) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixesList.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixesList proto.InternalMessageInfo

func (m *PrefixesList) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// The response message containing the keys for prefix
type KeysList struct {
	Keys                 []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeysList) Reset()         { *m = KeysList{} }
func (m *KeysList) String() string { return proto.CompactTextString(m) }
func (*KeysList) ProtoMessage()    {}
func (*KeysList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c351de099da60036, []int{6}
}

func (m *KeysList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeysList.Unmarshal(m, b)
}
func (m *KeysList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeysList.Marshal(b, m, deterministic)
}
func (m *KeysList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeysList.Merge(m, src)
}
func (m *KeysList) XXX_Size() int {
	return xxx_messageInfo_KeysList.Size(m)
}
func (m *KeysList) XXX_DiscardUnknown() {
	xxx_messageInfo_KeysList.DiscardUnknown(m)
}

var xxx_messageInfo_KeysList proto.InternalMessageInfo

func (m *KeysList) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*PrefixRequest)(nil), "pb.PrefixRequest")
	proto.RegisterType((*KeyMessage)(nil), "pb.KeyMessage")
	proto.RegisterType((*PutLogRequest)(nil), "pb.PutLogRequest")
	proto.RegisterType((*LogDetail)(nil), "pb.LogDetail")
	proto.RegisterType((*LogDetailList)(nil), "pb.LogDetailList")
	proto.RegisterType((*PrefixesList)(nil), "pb.PrefixesList")
	proto.RegisterType((*KeysList)(nil), "pb.KeysList")
}

func init() { proto.RegisterFile("lumberman.proto", fileDescriptor_c351de099da60036) }

var fileDescriptor_c351de099da60036 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x9b, 0xb6, 0x0a, 0xed, 0xad, 0x81, 0xed, 0x1e, 0xa6, 0xca, 0x48, 0x63, 0xf8, 0x85,
	0x82, 0xb4, 0x6c, 0x14, 0x21, 0x10, 0xbc, 0x21, 0x10, 0x0f, 0x2b, 0xd2, 0x14, 0xf6, 0xc4, 0x5b,
	0x22, 0x6e, 0x56, 0xd5, 0x04, 0x9b, 0xd8, 0x91, 0xc8, 0x27, 0xe2, 0x6b, 0x22, 0xdb, 0x49, 0xba,
	0x64, 0x48, 0xdb, 0xdb, 0xf9, 0xfc, 0xfb, 0xdf, 0x3f, 0x77, 0xe7, 0xc0, 0x93, 0xbc, 0x2a, 0x32,
	0x2a, 0x8b, 0xf4, 0x57, 0xac, 0x4a, 0x69, 0x24, 0x8e, 0x55, 0xc6, 0x9e, 0x0a, 0x29, 0x45, 0x4e,
	0xe7, 0x2e, 0x93, 0x55, 0x37, 0xe7, 0x54, 0x28, 0x53, 0x7b, 0x80, 0x3d, 0x1b, 0x5e, 0x9a, 0x6d,
	0x41, 0xda, 0xa4, 0x85, 0xf2, 0x00, 0x7f, 0x01, 0xd1, 0x55, 0x49, 0x37, 0xdb, 0x3f, 0x09, 0xfd,
	0xae, 0x48, 0x1b, 0x3c, 0x86, 0x50, 0xb9, 0xc4, 0x32, 0x38, 0x0d, 0x56, 0xf3, 0xa4, 0x39, 0xf1,
	0x13, 0x80, 0x4b, 0xaa, 0xbf, 0x91, 0xd6, 0xa9, 0x20, 0x3c, 0x84, 0xc9, 0x8e, 0xea, 0x06, 0xb1,
	0x21, 0xff, 0x08, 0xd1, 0x55, 0x65, 0x36, 0x52, 0xdc, 0x53, 0x08, 0x11, 0xa6, 0x3f, 0x53, 0x93,
	0x2e, 0xc7, 0x2e, 0xeb, 0x62, 0xbe, 0x83, 0xf9, 0x46, 0x8a, 0xcf, 0x64, 0xd2, 0x6d, 0x7e, 0xb7,
	0x36, 0xbe, 0x87, 0x79, 0xf7, 0xdd, 0x4e, 0x77, 0xb0, 0x66, 0xb1, 0xef, 0x2c, 0x6e, 0x3b, 0x8b,
	0xaf, 0x5b, 0x22, 0xd9, 0xc3, 0x9d, 0xd9, 0xe4, 0x96, 0xd9, 0x1a, 0xa2, 0xce, 0x6c, 0xb3, 0xd5,
	0x06, 0x9f, 0xc3, 0x34, 0x97, 0x42, 0x2f, 0x83, 0xd3, 0xc9, 0xea, 0x60, 0x1d, 0xc5, 0x2a, 0x8b,
	0x3b, 0x20, 0x71, 0x57, 0xfc, 0x15, 0x2c, 0xfc, 0x98, 0x48, 0x3b, 0x09, 0x83, 0x99, 0x6a, 0xce,
	0x4e, 0x36, 0x4f, 0xba, 0x33, 0x3f, 0x81, 0xd9, 0x25, 0xd5, 0x9e, 0x43, 0x98, 0xee, 0xa8, 0x6e,
	0x19, 0x17, 0xaf, 0xff, 0x4e, 0x20, 0xdc, 0x48, 0x21, 0xa8, 0xc4, 0x33, 0x08, 0xfd, 0xd0, 0xf0,
	0xc8, 0xba, 0xf6, 0x06, 0xc8, 0x1e, 0xdb, 0xd4, 0x7e, 0xe6, 0x7c, 0x84, 0xef, 0x60, 0xe1, 0x91,
	0xef, 0xa6, 0xa4, 0xb4, 0x78, 0x90, 0x68, 0x15, 0x5c, 0x04, 0xf8, 0x12, 0xc2, 0xaf, 0xe4, 0x7c,
	0x06, 0xf7, 0xac, 0xdf, 0x2d, 0x1f, 0xe1, 0x6b, 0x78, 0xe4, 0x51, 0xdd, 0x94, 0xbf, 0xfd, 0x3a,
	0xd8, 0x51, 0x0f, 0xb7, 0x2d, 0xf2, 0x11, 0xbe, 0x85, 0xa8, 0x91, 0xf4, 0xbe, 0xab, 0x27, 0x1c,
	0xfa, 0x5c, 0x04, 0x56, 0x76, 0x6d, 0x8b, 0x0c, 0xda, 0xb9, 0x4f, 0xf6, 0x01, 0x16, 0xd6, 0xb7,
	0x5d, 0x07, 0x1e, 0xdf, 0x79, 0x09, 0x5f, 0xec, 0x0f, 0xc0, 0x0e, 0xf7, 0xd5, 0xfc, 0xd2, 0xf8,
	0x08, 0xcf, 0x60, 0x66, 0x23, 0xbb, 0x9e, 0xff, 0xb9, 0x2d, 0x9a, 0xe1, 0x34, 0xf8, 0xa7, 0xe9,
	0x8f, 0xb1, 0xca, 0xb2, 0xd0, 0x15, 0x7e, 0xf3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xc8, 0x34,
	0x47, 0x7e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	// Write to Log
	PutLog(ctx context.Context, in *PutLogRequest, opts ...grpc.CallOption) (*KeyMessage, error)
	// Write to Log as stream
	PutLogStream(ctx context.Context, opts ...grpc.CallOption) (Logger_PutLogStreamClient, error)
	// Get Log details by key
	GetLog(ctx context.Context, in *KeyMessage, opts ...grpc.CallOption) (*LogDetail, error)
	// Get all Logs by prefix
	GetLogs(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (*LogDetailList, error)
	// Get all Logs as stream by prefix
	GetLogsStream(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Logger_GetLogsStreamClient, error)
	// Tail Logs as stream by prefix
	TailLogStream(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Logger_TailLogStreamClient, error)
	// List Log prefixes
	ListPrefixes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrefixesList, error)
	// List Log keys by prefix
	ListKeys(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (*KeysList, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) PutLog(ctx context.Context, in *PutLogRequest, opts ...grpc.CallOption) (*KeyMessage, error) {
	out := new(KeyMessage)
	err := c.cc.Invoke(ctx, "/pb.Logger/PutLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) PutLogStream(ctx context.Context, opts ...grpc.CallOption) (Logger_PutLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[0], "/pb.Logger/PutLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerPutLogStreamClient{stream}
	return x, nil
}

type Logger_PutLogStreamClient interface {
	Send(*PutLogRequest) error
	Recv() (*KeyMessage, error)
	grpc.ClientStream
}

type loggerPutLogStreamClient struct {
	grpc.ClientStream
}

func (x *loggerPutLogStreamClient) Send(m *PutLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loggerPutLogStreamClient) Recv() (*KeyMessage, error) {
	m := new(KeyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerClient) GetLog(ctx context.Context, in *KeyMessage, opts ...grpc.CallOption) (*LogDetail, error) {
	out := new(LogDetail)
	err := c.cc.Invoke(ctx, "/pb.Logger/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) GetLogs(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (*LogDetailList, error) {
	out := new(LogDetailList)
	err := c.cc.Invoke(ctx, "/pb.Logger/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) GetLogsStream(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Logger_GetLogsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[1], "/pb.Logger/GetLogsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerGetLogsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logger_GetLogsStreamClient interface {
	Recv() (*LogDetail, error)
	grpc.ClientStream
}

type loggerGetLogsStreamClient struct {
	grpc.ClientStream
}

func (x *loggerGetLogsStreamClient) Recv() (*LogDetail, error) {
	m := new(LogDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerClient) TailLogStream(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Logger_TailLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[2], "/pb.Logger/TailLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerTailLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logger_TailLogStreamClient interface {
	Recv() (*LogDetail, error)
	grpc.ClientStream
}

type loggerTailLogStreamClient struct {
	grpc.ClientStream
}

func (x *loggerTailLogStreamClient) Recv() (*LogDetail, error) {
	m := new(LogDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerClient) ListPrefixes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrefixesList, error) {
	out := new(PrefixesList)
	err := c.cc.Invoke(ctx, "/pb.Logger/ListPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) ListKeys(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (*KeysList, error) {
	out := new(KeysList)
	err := c.cc.Invoke(ctx, "/pb.Logger/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	// Write to Log
	PutLog(context.Context, *PutLogRequest) (*KeyMessage, error)
	// Write to Log as stream
	PutLogStream(Logger_PutLogStreamServer) error
	// Get Log details by key
	GetLog(context.Context, *KeyMessage) (*LogDetail, error)
	// Get all Logs by prefix
	GetLogs(context.Context, *PrefixRequest) (*LogDetailList, error)
	// Get all Logs as stream by prefix
	GetLogsStream(*PrefixRequest, Logger_GetLogsStreamServer) error
	// Tail Logs as stream by prefix
	TailLogStream(*PrefixRequest, Logger_TailLogStreamServer) error
	// List Log prefixes
	ListPrefixes(context.Context, *empty.Empty) (*PrefixesList, error)
	// List Log keys by prefix
	ListKeys(context.Context, *PrefixRequest) (*KeysList, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) PutLog(ctx context.Context, req *PutLogRequest) (*KeyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLog not implemented")
}
func (*UnimplementedLoggerServer) PutLogStream(srv Logger_PutLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutLogStream not implemented")
}
func (*UnimplementedLoggerServer) GetLog(ctx context.Context, req *KeyMessage) (*LogDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (*UnimplementedLoggerServer) GetLogs(ctx context.Context, req *PrefixRequest) (*LogDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedLoggerServer) GetLogsStream(req *PrefixRequest, srv Logger_GetLogsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogsStream not implemented")
}
func (*UnimplementedLoggerServer) TailLogStream(req *PrefixRequest, srv Logger_TailLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLogStream not implemented")
}
func (*UnimplementedLoggerServer) ListPrefixes(ctx context.Context, req *empty.Empty) (*PrefixesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrefixes not implemented")
}
func (*UnimplementedLoggerServer) ListKeys(ctx context.Context, req *PrefixRequest) (*KeysList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_PutLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).PutLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Logger/PutLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).PutLog(ctx, req.(*PutLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_PutLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggerServer).PutLogStream(&loggerPutLogStreamServer{stream})
}

type Logger_PutLogStreamServer interface {
	Send(*KeyMessage) error
	Recv() (*PutLogRequest, error)
	grpc.ServerStream
}

type loggerPutLogStreamServer struct {
	grpc.ServerStream
}

func (x *loggerPutLogStreamServer) Send(m *KeyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loggerPutLogStreamServer) Recv() (*PutLogRequest, error) {
	m := new(PutLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Logger_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Logger/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).GetLog(ctx, req.(*KeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Logger/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).GetLogs(ctx, req.(*PrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_GetLogsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServer).GetLogsStream(m, &loggerGetLogsStreamServer{stream})
}

type Logger_GetLogsStreamServer interface {
	Send(*LogDetail) error
	grpc.ServerStream
}

type loggerGetLogsStreamServer struct {
	grpc.ServerStream
}

func (x *loggerGetLogsStreamServer) Send(m *LogDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _Logger_TailLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServer).TailLogStream(m, &loggerTailLogStreamServer{stream})
}

type Logger_TailLogStreamServer interface {
	Send(*LogDetail) error
	grpc.ServerStream
}

type loggerTailLogStreamServer struct {
	grpc.ServerStream
}

func (x *loggerTailLogStreamServer) Send(m *LogDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _Logger_ListPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).ListPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Logger/ListPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).ListPrefixes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Logger/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).ListKeys(ctx, req.(*PrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutLog",
			Handler:    _Logger_PutLog_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _Logger_GetLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Logger_GetLogs_Handler,
		},
		{
			MethodName: "ListPrefixes",
			Handler:    _Logger_ListPrefixes_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _Logger_ListKeys_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutLogStream",
			Handler:       _Logger_PutLogStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLogsStream",
			Handler:       _Logger_GetLogsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TailLogStream",
			Handler:       _Logger_TailLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lumberman.proto",
}
